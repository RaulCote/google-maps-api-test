{"version":3,"sources":["features/map/MapContext.js","features/map/Autocomplete.js","features/map/Map.js","features/map/mapSlice.js","features/map/Markers.js","App.js","constants.js","app/store.js","serviceWorker.js","index.js"],"names":["MapContext","createContext","PLACE","mapContextReducer","state","action","type","map","payload","place","useMap","useContext","dispatch","loadMap","useCallback","updatePlace","MapProvider","children","useReducer","Provider","value","countryRestrict","country","Autocomplete","google","window","inputEl","useRef","useEffect","autocomplete","maps","places","current","componentRestrictions","boundsListener","addListener","setBounds","getBounds","placesListener","newPlace","getPlace","event","removeListener","id","placeholder","ref","countries","es","center","lat","lng","zoom","mapOptions","streetViewControl","mapTypeControl","fullscreenControl","zoomControl","gestureHandling","Map","apiKey","style","useState","errorLoadingMaps","setErrorsLoading","mapEl","a","loader","Loader","version","libraries","load","initMap","mapSlice","createSlice","name","initialState","markers","reducers","addMarkerToStatistics","push","actions","Markers","setMarkers","useDispatch","updateMarkers","geometry","bounds","LatLngBounds","prevMarkers","forEach","marker","setMap","position","location","title","Marker","viewport","union","extend","fitBounds","App","width","height","configureStore","reducer","mapReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAcMA,EAAaC,wBAAc,MAG3BC,EAAQ,QAERC,EAAoB,SAACC,EAAOC,GAChC,OAAQA,EAAOC,MACb,IALQ,MAMN,OAAO,2BACFF,GADL,IAEEG,IAAKF,EAAOG,UAEhB,KAAKN,EACH,OAAO,2BACFE,GADL,IAEEK,MAAOJ,EAAOG,UAElB,QACE,OAAOJ,IAiBN,SAASM,IAAU,IAAD,EAInBC,qBAAWX,GAJQ,IAErBI,MAASG,EAFY,EAEZA,IAAKE,EAFO,EAEPA,MACdG,EAHqB,EAGrBA,SAuBF,MAAO,CAAEL,MAAKE,QAAOI,QApBLC,uBACd,SAAAP,GACEK,EAAS,CACPN,KA1CI,MA2CJE,QAASD,MAGb,CAACK,IAa2BG,YAVVD,uBAClB,SAAAL,GACEG,EAAS,CACPN,KAAMJ,EACNM,QAASC,MAGb,CAACG,KAMUI,MA1CK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACVC,qBAAWf,EAAmB,CACtDI,IAAK,KACLE,MAAO,OAH2B,mBAC7BL,EAD6B,KACtBQ,EADsB,KAMpC,OACE,cAACZ,EAAWmB,SAAZ,CAAqBC,MAAO,CAAEhB,QAAOQ,YAArC,SACGK,KCzCDI,EAAkB,CACtBC,QAAS,MAGI,SAASC,IAAgB,IAAD,EACRb,IAArBH,EAD6B,EAC7BA,IAAKQ,EADwB,EACxBA,YACPS,EAASC,OAAOD,OAChBE,EAAUC,iBAAO,MA0BvB,OAxBAC,qBAAU,WAGR,IAAMC,EAAe,IAAIL,EAAOM,KAAKC,OAAOR,aAAaG,EAAQM,QAAS,CACxEC,sBAAuBZ,IAInBa,EAAiB3B,EAAI4B,YAAY,kBAAkB,WACvDN,EAAaO,UAAU7B,EAAI8B,gBAGvBC,EAAiBT,EAAaM,YAAY,iBAAiB,WAC/D,IAAMI,EAAWV,EAAaW,WAE9BzB,EAAYwB,MAGd,OAAO,WACLf,EAAOM,KAAKW,MAAMC,eAAeR,GACjCV,EAAOM,KAAKW,MAAMC,eAAeJ,MAElC,CAACd,EAAQjB,EAAKQ,IAGf,uBACE4B,GAAG,eACHrC,KAAK,OACLsC,YAAY,YACZC,IAAKnB,I,6CCnCLoB,EAAY,CAChBC,GAAI,CACFC,OAAQ,CACNC,IAAK,UACLC,KAAM,UAERC,KAAM,IAIJC,EAAa,CACjBJ,OAAQF,EAAUC,GAAGC,OACrBG,KAAML,EAAUC,GAAGI,KACnBE,mBAAmB,EACnBC,gBAAgB,EAChBC,mBAAmB,EACnBC,aAAa,EACbC,gBAAiB,eAmDJC,MAhDf,YAA2C,IAA5BC,EAA2B,EAA3BA,OAAQ1C,EAAmB,EAAnBA,SAAU2C,EAAS,EAATA,MAAS,EACKC,oBAAS,GADd,mBACjCC,EADiC,KACfC,EADe,KAElCC,EAAQrC,mBAF0B,EAGfjB,IAAjBH,EAHgC,EAGhCA,IAAKM,EAH2B,EAG3BA,QA0Bb,OAxBAe,qBAAU,WAAM,4CACd,gCAAAqC,EAAA,sEAEUC,EAAS,IAAIC,IAAO,CACxBR,SACAS,QAAS,SACTC,UAAW,CAAC,YALlB,SAQUH,EAAOI,OARjB,OAUU9C,EAASC,OAAOD,OAEhBjB,EAAM,IAAIiB,EAAOM,KAAK4B,IAAIM,EAAMhC,QAASoB,GAE/CvC,EAAQN,GAdZ,gDAgBIwD,GAAiB,GAhBrB,0DADc,uBAAC,WAAD,wBAqBdQ,KACC,CAACZ,EAAQ9C,IAERiD,EAGK,yDAIP,qBAAKnB,GAAG,MAAME,IAAKmB,EAAOJ,MAAOA,EAAjC,SACGrD,EAAMU,EAAW,gC,cC7DXuD,EAAWC,YAAY,CAClCC,KAAM,MACNC,aAAc,CACZC,QAAS,IAEXC,SAAU,CAKRC,sBAAuB,SAAC1E,EAAOC,GAC7BD,EAAMwE,QAAQG,KAAK1E,EAAOG,aAMjBsE,EAA0BN,EAASQ,QAAnCF,sBAMAN,IAAf,QCpBe,SAASS,IAAW,IAAD,EACTpB,mBAAS,IAAvBqB,EADuB,oBAE1BtE,EAAWuE,cAFe,EAGTzE,IAAfH,EAHwB,EAGxBA,IAAKE,EAHmB,EAGnBA,MACPe,EAASC,OAAOD,OAEhB4D,EAAgBtE,uBACpB,SAAAL,GACE,GAAKA,GAAUA,EAAM4E,SAArB,CAKA,IAAMC,EAAS,IAAI9D,EAAOM,KAAKyD,aAG/BL,GAAW,SAAAM,GAKT,OAJAA,EAAYC,SAAQ,SAAAC,GAClBA,EAAOC,OAAO,SAGT,MAKT/E,EACEkE,EAAsB,CACpBc,SAAU,CACR3C,IAAKxC,EAAM4E,SAASQ,SAAS5C,MAC7BC,IAAKzC,EAAM4E,SAASQ,SAAS3C,OAE/B4C,MAAOrF,EAAMiE,QAIjBQ,EAAW,CACT,IAAI1D,EAAOM,KAAKiE,OAAO,CACrBxF,MACAqF,SAAUnF,EAAM4E,SAASQ,SACzBC,MAAOrF,EAAMiE,SAIbjE,EAAM4E,SAASW,SAEjBV,EAAOW,MAAMxF,EAAM4E,SAASW,UAE5BV,EAAOY,OAAOzF,EAAM4E,SAASQ,UAG/BtF,EAAI4F,UAAUb,MAEhB,CAAC1E,EAAUY,EAAQjB,IAOrB,OAJAqB,qBAAU,WACJnB,GAAO2E,EAAc3E,KACxB,CAACA,EAAO2E,IAEJ,6BC7CMgB,MAbf,WACE,OACE,8BACE,cAAC,EAAD,UACE,eAAC,EAAD,CAAKzC,OCRU,0CDQOC,MAAO,CAAEyC,MAAO,OAAQC,OAAQ,SAAtD,UACE,cAAC/E,EAAD,IACA,cAAC0D,EAAD,YETKsB,cAAe,CAC5BC,QAAS,CACPjG,IAAKkG,KCMWC,QACW,cAA7BjF,OAAOoE,SAASc,UAEe,UAA7BlF,OAAOoE,SAASc,UAEhBlF,OAAOoE,SAASc,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2e6a6b70.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useReducer,\n} from 'react';\n\n/* This context and useMap API have been created\n  in order to have map and place objects in a global state for the maps, \n  Redux complains with complex items like those but Context can work\n  perfectly. It lets me seperate the concepts better. As an example\n  thanks to it I can have Markers into a separate file and not together \n  with Autocomplete search box */\n\nconst MapContext = createContext(null);\n\nconst MAP = 'MAP';\nconst PLACE = 'PLACE';\n\nconst mapContextReducer = (state, action) => {\n  switch (action.type) {\n    case MAP:\n      return {\n        ...state,\n        map: action.payload,\n      };\n    case PLACE:\n      return {\n        ...state,\n        place: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst MapProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(mapContextReducer, {\n    map: null,\n    place: null,\n  });\n\n  return (\n    <MapContext.Provider value={{ state, dispatch }}>\n      {children}\n    </MapContext.Provider>\n  );\n};\n\nexport function useMap() {\n  const {\n    state: { map, place },\n    dispatch,\n  } = useContext(MapContext);\n\n  const loadMap = useCallback(\n    map => {\n      dispatch({\n        type: MAP,\n        payload: map,\n      });\n    },\n    [dispatch]\n  );\n\n  const updatePlace = useCallback(\n    place => {\n      dispatch({\n        type: PLACE,\n        payload: place,\n      });\n    },\n    [dispatch]\n  );\n\n  return { map, place, loadMap, updatePlace };\n}\n\nexport default MapProvider;\n","import React, { useEffect, useRef } from 'react';\nimport { useMap } from './MapContext';\n\nconst countryRestrict = {\n  country: 'es',\n};\n\nexport default function Autocomplete() {\n  const { map, updatePlace } = useMap();\n  const google = window.google;\n  const inputEl = useRef(null);\n\n  useEffect(() => {\n    /* Using Autocomplete instead of SearchBox as it makes\n     * less calls to Google Maps */\n    const autocomplete = new google.maps.places.Autocomplete(inputEl.current, {\n      componentRestrictions: countryRestrict,\n    });\n\n    // Bias the SearchBox results towards current map's viewport.\n    const boundsListener = map.addListener('bounds_changed', () => {\n      autocomplete.setBounds(map.getBounds());\n    });\n\n    const placesListener = autocomplete.addListener('place_changed', () => {\n      const newPlace = autocomplete.getPlace();\n\n      updatePlace(newPlace);\n    });\n\n    return () => {\n      google.maps.event.removeListener(boundsListener);\n      google.maps.event.removeListener(placesListener);\n    };\n  }, [google, map, updatePlace]);\n\n  return (\n    <input\n      id=\"autocomplete\"\n      type=\"text\"\n      placeholder=\"Search...\"\n      ref={inputEl}\n    />\n  );\n}\n","import './Map.css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { useMap } from './MapContext';\n\nconst countries = {\n  es: {\n    center: {\n      lat: 41.294856,\n      lng: -4.055685,\n    },\n    zoom: 5,\n  },\n};\n\nconst mapOptions = {\n  center: countries.es.center,\n  zoom: countries.es.zoom,\n  streetViewControl: false,\n  mapTypeControl: false,\n  fullscreenControl: false,\n  zoomControl: false,\n  gestureHandling: 'cooperative',\n};\n\nfunction Map({ apiKey, children, style }) {\n  const [errorLoadingMaps, setErrorsLoading] = useState(false);\n  const mapEl = useRef();\n  const { map, loadMap } = useMap();\n\n  useEffect(() => {\n    async function initMap() {\n      try {\n        const loader = new Loader({\n          apiKey,\n          version: 'weekly',\n          libraries: ['places'],\n        });\n\n        await loader.load();\n\n        const google = window.google;\n\n        const map = new google.maps.Map(mapEl.current, mapOptions);\n\n        loadMap(map);\n      } catch (err) {\n        setErrorsLoading(true);\n      }\n    }\n\n    initMap();\n  }, [apiKey, loadMap]);\n\n  if (errorLoadingMaps) {\n    // this error should be properly styled, a nice beautiful component\n    // to show when the maps api fails\n    return <h1>Something went wrong...</h1>;\n  }\n\n  return (\n    <div id=\"map\" ref={mapEl} style={style}>\n      {map ? children : <></>}\n    </div>\n  );\n}\n\nMap.propTypes = {\n  apiKey: PropTypes.string.isRequired,\n  children: PropTypes.node,\n  style: PropTypes.object.isRequired,\n};\n\nexport default Map;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const mapSlice = createSlice({\n  name: 'map',\n  initialState: {\n    markers: [],\n  },\n  reducers: {\n    /* as redux toolkit uses immer library we \n      can use inside the reducers mutable js methods, \n      immer will produce internally a new array */\n\n    addMarkerToStatistics: (state, action) => {\n      state.markers.push(action.payload);\n    },\n  },\n});\n\n/* actions */\nexport const { addMarkerToStatistics } = mapSlice.actions;\n\n/* selectors */\nexport const selectMarkers = state => state.map.markers;\n\n/* reducer */\nexport default mapSlice.reducer;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useMap } from './MapContext';\nimport { addMarkerToStatistics } from './mapSlice';\n\nexport default function Markers() {\n  const [, setMarkers] = useState([]);\n  const dispatch = useDispatch();\n  const { map, place } = useMap();\n  const google = window.google;\n\n  const updateMarkers = useCallback(\n    place => {\n      if (!place || !place.geometry) {\n        return;\n      }\n\n      // Get the icon, name and location of the place.\n      const bounds = new google.maps.LatLngBounds();\n\n      // Clear out old markers.\n      setMarkers(prevMarkers => {\n        prevMarkers.forEach(marker => {\n          marker.setMap(null);\n        });\n\n        return [];\n      });\n\n      /* Only sending to redux state the necessary data to \n     recreate the markers for statistics when needed */\n      dispatch(\n        addMarkerToStatistics({\n          position: {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng(),\n          },\n          title: place.name,\n        })\n      );\n\n      setMarkers([\n        new google.maps.Marker({\n          map,\n          position: place.geometry.location,\n          title: place.name,\n        }),\n      ]);\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport.\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n\n      map.fitBounds(bounds);\n    },\n    [dispatch, google, map]\n  );\n\n  useEffect(() => {\n    if (place) updateMarkers(place);\n  }, [place, updateMarkers]);\n\n  return <></>;\n}\n","import React from 'react';\r\nimport MapProvider from './features/map/MapContext';\r\nimport Autocomplete from './features/map/Autocomplete';\r\nimport Map from './features/map/Map';\r\nimport Markers from './features/map/Markers';\r\nimport { API_KEY } from './constants';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <MapProvider>\r\n        <Map apiKey={API_KEY} style={{ width: '100%', height: '100vh' }}>\r\n          <Autocomplete />\r\n          <Markers />\r\n        </Map>\r\n      </MapProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/* TODO: this key should be kept private, as it's intended that someone\nunknown could run this locally I will leave it open for a while */\n\nexport const API_KEY = 'AIzaSyCo-tYlBZFB9dXRlYAOol00sbfizcA4bhY';\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport mapReducer from '../features/map/mapSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    map: mapReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}